%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.2 (Build 19C57) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 206 206
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 206 206
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.16078432 0.22352941 0.33725491 sc
q
24 206 m
182 206 l
195.25484 206 206 195.25484 206 182 c
206 24 l
206 10.745166 195.25484 0 182 0 c
24 0 l
10.745166 0 0 10.745166 0 24 c
0 182 l
0 195.25484 10.745166 206 24 206 c
h
W*
0 0 206 206 rc
-5 211 m
211 211 l
211 -5 l
-5 -5 l
h
f
Q
1 1 1 sc
q
46.612095 94.851242 m
53.362919 94.851242 l
63.962349 129.22745 l
63.962349 94.851242 l
73.867767 94.851242 l
73.867767 137 l
58.536449 137 l
50.713062 111.78658 l
43.331318 137 l
28 137 l
28 94.851242 l
36.26503 94.851242 l
36.26503 129.22745 l
46.612095 94.851242 l
h
109.81818 109.42763 m
109.75501 114.89377 109.12334 117.46977 107.29147 120.5484 c
104.95425 124.56947 100.27983 127.08264 95.100067 127.08264 c
86.193398 127.08264 80.066116 120.35992 80.066116 110.68421 c
80.066116 101.19699 86.193398 94.851242 95.415909 94.851242 c
99.963997 94.851242 103.31189 96.170654 106.02811 99.060799 c
107.73364 100.88285 108.55482 102.32792 109.62868 105.59504 c
101.29052 106.16051 l
100.65884 103.01904 98.763802 101.32265 95.73175 101.32265 c
92.255333 101.32265 89.897774 103.78263 89.739311 107.57156 c
89.732269 108.29102 l
89.735954 108.61341 89.748848 109.0686 89.793968 109.42763 c
109.81818 109.42763 l
h
89.983475 114.68595 m
90.43232 118.92046 92.291824 120.8843 95.818466 120.8843 c
99.216873 120.8843 100.75577 119.04321 101.1405 114.68595 c
89.983475 114.68595 l
h
147.00827 131.79076 m
145.92155 131.97868 145.41017 132.04132 144.45131 132.04132 c
139.59308 132.04132 137.99498 130.66318 137.29181 126.0276 c
133.83992 127.09254 132.11397 127.34311 128.98169 127.34311 c
120.09625 127.34311 114.47094 123.58453 114.47094 117.63346 c
114.47094 114.12547 116.19688 111.80768 120.03233 110.11632 c
118.11461 109.30196 117.41145 108.9261 116.38866 108.23703 c
114.72663 107.10946 113.70385 105.23017 113.70385 103.2256 c
113.70385 100.78253 114.85448 99.216461 117.73106 97.713028 c
114.02347 96.710747 112.29752 94.956741 112.29752 92.137817 c
112.29752 89.876404 113.7975 87.784607 116.19458 86.721741 c
116.58043 86.562599 l
119.39309 85.372383 122.97283 84.933884 128.726 84.933884 c
135.24625 84.933884 139.14561 85.6856 142.34181 87.627525 c
145.09055 89.256241 146.8165 92.075172 146.8165 95.082031 c
146.8165 98.52739 144.64308 101.28368 141.2551 102.28596 c
140.09068 102.58984 l
138.75546 102.90533 137.53787 103.03696 134.18358 103.21809 c
129.15315 103.47042 l
123.53731 103.78419 122.46144 104.29053 122.46144 106.2951 c
122.46144 107.29739 122.90891 107.92382 124.12347 108.61289 c
125.91334 108.29967 127.25574 108.17439 129.23738 108.17439 c
138.12282 108.17439 143.42851 111.74503 143.42851 117.75875 c
143.42851 120.07653 142.85321 121.45467 140.93549 123.64718 c
141.31903 125.40118 142.46967 126.27818 144.51523 126.27818 c
145.28232 126.27818 145.7937 126.21554 147.00827 126.0276 c
147.00827 131.79076 l
h
129.53195 122.12397 m
132.616 122.12397 134.61157 120.1807 134.61157 117.2323 c
134.61157 114.21689 132.55553 112.20661 129.47148 112.20661 c
126.50836 112.20661 124.69421 114.08287 124.69421 117.2323 c
124.69421 120.24771 126.50836 122.12397 129.53195 122.12397 c
h
124.23325 95.951622 m
126.36352 95.881973 l
128.75243 95.869537 l
136.35416 95.781548 138.33058 95.196365 138.33058 93.165848 c
138.33058 90.797935 135.88704 89.892563 129.87218 89.892563 c
128.74268 89.902679 l
123.13153 90.007935 120.9752 90.945671 120.9752 93.235489 c
120.9752 94.62838 122.04034 95.951622 123.23078 96.090912 c
123.39664 96.087662 l
123.58113 96.079536 123.87523 96.051109 124.23325 95.951622 c
h
169.26033 95.47953 m
178 95.47953 l
177.7477 96.439575 l
177.49307 97.469467 177.45064 98.024055 177.44356 99.935486 c
177.44215 115.27074 l
177.43408 116.3576 l
177.3737 120.12997 176.96178 121.63221 175.7686 123.18723 c
173.78513 125.63757 169.7562 127.08264 164.79752 127.08264 c
160.33472 127.08264 156.55373 126.01455 153.88843 123.94118 c
151.96695 122.43328 151.03719 120.73689 150.41736 117.40694 c
158.72314 116.59016 l
159.09505 119.54314 160.95454 121.11387 163.92975 121.11387 c
166.96695 121.11387 168.45454 119.60596 168.45454 116.59016 c
168.45454 114.83094 l
166.44469 114.65698 l
160.98911 114.15745 158.47307 113.67185 156.30579 112.88323 c
151.90495 111.18684 149.48761 107.91972 149.48761 103.52168 c
149.48761 98.244019 153.2686 94.851242 159.09505 94.851242 c
163.49586 94.851242 165.91322 96.233482 168.88843 100.31738 c
168.82645 99.940407 168.82645 99.563431 168.82645 99.500603 c
168.82645 97.867043 168.88843 97.490067 169.26033 95.47953 c
h
168.08264 106.84804 m
168.08264 102.8811 165.55469 99.809914 162.18408 99.809914 c
159.78577 99.809914 158.16528 101.47347 158.16528 103.84084 c
158.16528 106.02299 159.44516 107.57348 161.94978 108.49228 c
162.37854 108.63956 l
163.99902 109.21541 165.16577 109.40736 168.08264 109.72727 c
168.08264 106.84804 l
h
W
0 0 206 206 rc
23 142 m
183 142 l
183 79.933884 l
23 79.933884 l
h
f
Q
q
28.057142 72.804764 m
28.380953 71.776192 28.704762 71.261902 29.333334 70.74762 c
30.342857 69.947617 31.657143 69.547623 33.238094 69.547623 c
36.304764 69.547623 38.304764 71.109528 38.304764 73.528572 c
38.304764 74.309525 38.095238 74.995239 37.695236 75.585716 c
37.200001 76.328575 36.380951 76.785713 35.009525 77.147621 c
32.838097 77.680954 l
31.638096 77.985718 31.066668 78.480949 31.066668 79.223808 c
31.066668 80.176193 31.923809 80.785713 33.238094 80.785713 c
34.514286 80.785713 35.276192 80.328575 35.619049 79.35714 c
37.790478 79.890472 l
37.561905 80.671425 37.276192 81.071426 36.723808 81.528572 c
35.809525 82.25238 34.590477 82.633331 33.219048 82.633331 c
30.514286 82.633331 28.72381 81.109528 28.72381 78.842857 c
28.72381 78.023811 28.971428 77.280952 29.466667 76.652382 c
29.923809 76.042854 30.571428 75.699997 31.866667 75.35714 c
34.304764 74.728569 l
35.371429 74.442856 35.885715 73.947617 35.885715 73.185715 c
35.885715 72.080956 34.914288 71.395241 33.371429 71.395241 c
32.380951 71.395241 31.523809 71.62381 30.990477 72.061905 c
30.628571 72.347618 30.457144 72.633331 30.266666 73.280952 c
28.057142 72.804764 l
h
56.523811 69.738098 m
56.333332 70.442856 56.238094 71.033333 56.238094 71.64286 c
56.238094 75.871429 l
56.235573 76.196938 l
56.216534 77.328705 56.084126 77.80159 55.647617 78.290474 c
55.038094 78.995239 54.047619 79.319046 52.42857 79.319046 c
51.095238 79.319046 50.200001 79.109528 49.419048 78.576187 c
48.676189 78.080956 48.333332 77.547623 48.180954 76.633331 c
49.990475 76.366669 l
50.219048 77.37619 50.866665 77.814285 52.161903 77.814285 c
53.495239 77.814285 54.161903 77.338097 54.161903 76.366669 c
54.161903 75.661903 l
52.485714 75.661903 51.57143 75.585716 50.580952 75.338097 c
48.809525 74.900002 47.87619 73.890472 47.87619 72.423813 c
47.87619 70.728569 49.152382 69.547623 50.980953 69.547623 c
52.542858 69.547623 53.514286 70.176193 54.161903 71.64286 c
54.219048 70.842857 54.295238 70.423813 54.485714 69.738098 c
56.523811 69.738098 l
h
54.161903 73.661903 m
54.161903 72.157143 53.171429 71.147621 51.704762 71.147621 c
50.676189 71.147621 50.047619 71.680954 50.047619 72.557144 c
50.047619 73.852379 51.457142 74.519051 54.161903 74.519051 c
54.161903 73.661903 l
h
54.847618 82.957146 m
54.466667 82.404762 54.219048 82.23333 53.819046 82.23333 c
53.495239 82.23333 53.209522 82.328575 52.561905 82.633331 c
51.971428 82.900002 51.666668 82.995239 51.304764 82.995239 c
50.619049 82.995239 50.066666 82.671425 49.438095 81.909523 c
50.085712 80.957146 l
50.619049 81.509521 50.923809 81.699997 51.24762 81.699997 c
51.514286 81.699997 51.666668 81.64286 52.200001 81.35714 c
52.75238 81.071426 53.228573 80.919044 53.590477 80.919044 c
54.333332 80.919044 55.152382 81.395241 55.495239 82.004761 c
54.847618 82.957146 l
h
70.895241 79.319046 m
68.304764 79.319046 66.495239 77.319046 66.495239 74.461906 c
66.495239 73.261902 66.800003 72.195236 67.428574 71.280952 c
68.190475 70.138092 69.333336 69.547623 70.780952 69.547623 c
73.409523 69.547623 75.238098 71.547623 75.238098 74.423813 c
75.238098 75.64286 75.009521 76.5 74.457146 77.395241 c
73.619049 78.709526 72.476189 79.319046 70.895241 79.319046 c
h
70.895241 77.585716 m
72.24762 77.585716 72.990479 76.5 72.990479 74.480949 c
72.990479 72.423813 72.228569 71.280952 70.85714 71.280952 c
69.504761 71.280952 68.742859 72.423813 68.742859 74.442856 c
68.742859 76.461906 69.523811 77.585716 70.895241 77.585716 c
h
101.00952 69.738098 m
101.00952 74.76667 l
104.19048 74.76667 l
106.59048 74.76667 108.30476 76.366669 108.30476 78.633331 c
108.30476 79.985718 107.69524 81.109528 106.59048 81.814285 c
105.82858 82.271431 105.14286 82.442856 103.92381 82.442856 c
98.723808 82.442856 l
98.723808 69.738098 l
101.00952 69.738098 l
h
101.00952 76.728569 m
101.00952 80.538094 l
103.50476 80.538094 l
104.38095 80.538094 104.97143 80.366669 105.33334 80.023811 c
105.67619 79.719048 105.90476 79.128571 105.90476 78.614288 c
105.90476 77.452377 105.06667 76.728569 103.71429 76.728569 c
101.00952 76.728569 l
h
126.21905 69.738098 m
126.02857 70.442856 125.93333 71.033333 125.93333 71.64286 c
125.93333 75.871429 l
125.93081 76.196938 l
125.91177 77.328705 125.77937 77.80159 125.34286 78.290474 c
124.73333 78.995239 123.74286 79.319046 122.12381 79.319046 c
120.79047 79.319046 119.89524 79.109528 119.11429 78.576187 c
118.37143 78.080956 118.02857 77.547623 117.87619 76.633331 c
119.68571 76.366669 l
119.91428 77.37619 120.5619 77.814285 121.85714 77.814285 c
123.19048 77.814285 123.85714 77.338097 123.85714 76.366669 c
123.85714 75.661903 l
122.18095 75.661903 121.26667 75.585716 120.27619 75.338097 c
118.50476 74.900002 117.57143 73.890472 117.57143 72.423813 c
117.57143 70.728569 118.84762 69.547623 120.67619 69.547623 c
122.2381 69.547623 123.20953 70.176193 123.85714 71.64286 c
123.91428 70.842857 123.99048 70.423813 124.18095 69.738098 c
126.21905 69.738098 l
h
123.85714 73.661903 m
123.85714 72.157143 122.86667 71.147621 121.4 71.147621 c
120.37143 71.147621 119.74286 71.680954 119.74286 72.557144 c
119.74286 73.852379 121.15238 74.519051 123.85714 74.519051 c
123.85714 73.661903 l
h
144.53334 69.738098 m
144.53334 79.128571 l
142.41905 79.128571 l
142.41905 74.614288 l
142.41905 73.680954 142.34285 73.147621 142.13333 72.671425 c
141.82857 71.909523 141.04762 71.35714 140.30476 71.35714 c
139.84763 71.35714 139.39047 71.604759 139.16191 71.985718 c
139.02856 72.23333 138.97144 72.519051 138.97144 73.014282 c
138.97144 79.128571 l
136.8 79.128571 l
136.8 72.557144 l
136.8 71.699997 136.93333 71.204765 137.27618 70.690475 c
137.80952 69.928574 138.57143 69.547623 139.58095 69.547623 c
140.34285 69.547623 141.00952 69.776192 141.5619 70.23333 c
142.05714 70.633331 142.28572 70.976189 142.55238 71.776192 c
142.55238 69.738098 l
144.53334 69.738098 l
h
157.51428 69.738098 m
157.51428 82.442856 l
155.39999 82.442856 l
155.39999 69.738098 l
157.51428 69.738098 l
h
172.19048 79.319046 m
169.60001 79.319046 167.79048 77.319046 167.79048 74.461906 c
167.79048 73.261902 168.09525 72.195236 168.72382 71.280952 c
169.48572 70.138092 170.62857 69.547623 172.07619 69.547623 c
174.70476 69.547623 176.53334 71.547623 176.53334 74.423813 c
176.53334 75.64286 176.30476 76.5 175.75238 77.395241 c
174.91429 78.709526 173.77142 79.319046 172.19048 79.319046 c
h
172.19048 77.585716 m
173.54286 77.585716 174.28572 76.5 174.28572 74.480949 c
174.28572 72.423813 173.5238 71.280952 172.15237 71.280952 c
170.8 71.280952 170.0381 72.423813 170.0381 74.442856 c
170.0381 76.461906 170.81905 77.585716 172.19048 77.585716 c
h
W
0 0 206 206 rc
23.057142 87.995239 m
181.53334 87.995239 l
181.53334 64.547623 l
23.057142 64.547623 l
h
f
Q
q
29.190475 89.380951 m
107.7619 89.380951 l
108.41939 89.380951 108.95238 88.847961 108.95238 88.190475 c
108.95238 87.532997 108.41939 87 107.7619 87 c
29.190475 87 l
28.532995 87 28 87.532997 28 88.190475 c
28 88.847961 28.532995 89.380951 29.190475 89.380951 c
h
W*
0 0 206 206 rc
23 94.380951 m
113.95238 94.380951 l
113.95238 82 l
23 82 l
h
f
Q
q
151.80952 89.380951 m
176.80952 89.380951 l
177.46701 89.380951 178 88.847961 178 88.190475 c
178 87.532997 177.46701 87 176.80952 87 c
151.80952 87 l
151.15204 87 150.61905 87.532997 150.61905 88.190475 c
150.61905 88.847961 151.15204 89.380951 151.80952 89.380951 c
h
W*
0 0 206 206 rc
145.61905 94.380951 m
183 94.380951 l
183 82 l
145.61905 82 l
h
f
ep
end
%%Trailer
%%EOF
